{
    "collab_server" : "",
    "contents" : "# How to download a file using a URL\n\nlibrary(downloader) \nurl <- \"https://raw.githubusercontent.com/genomicsclass/dagdata/master/inst/extdata/femaleMiceWeights.csv\"\nfilename <- \"femaleMiceWeights.csv\" \ndownload(url, destfile=filename)\n\n#\n\nfemaleMW = read.csv(\"femaleMiceWeights.csv\")\nstr(femaleMW)\nfemaleMW[12,2]\nfemaleMW$Bodyweight[11]\nlength(femaleMW$Bodyweight)\n\nmean(femaleMW[femaleMW$Diet==\"hf\",]$Bodyweight)\n\nset.seed(1)\nsample(13:24, 1)\nfemaleMW$Bodyweight[16]\n\n# dplyr\ninstall.packages(\"dplyr\")\nlibrary(dplyr)\n\ninstall.packages(\"downloader\")\nlibrary(downloader)\nurl=\"https://raw.githubusercontent.com/genomicsclass/dagdata/master/inst/extdata/msleep_ggplot2.csv\"\nfilename <- basename(url)\ndownload(url,filename)\n\ndat=read.csv(\"msleep_ggplot2.csv\")\nclass(dat)\n\ndat = read.csv(\"femaleMiceWeights.csv\")\nstr(dat)\n\n# Random VAriables Exercise #1\ndat=read.csv(\"femaleControlsPopulation.csv\")\n\nsummary(dat)\nset.seed(1)\nsam=sample(dat$Bodyweight, 5)\nabs(mean(sam)-mean(dat$Bodyweight))\n\nset.seed(5)\nsam=sample(dat$Bodyweight, 5)\nabs(mean(sam)-mean(dat$Bodyweight))\n\n# Conclusion: Abs diff using 2 different samples in a random variable\n\n# Null distributions exeercises\n\nset.seed(1)\nn=10000\navgs=vector(\"numeric\",n)\nfor (i in 1:n){ \n  avgs[i]=mean(sample(dat$Bodyweight,50))\n}\n\nsum(abs(avgs-mean(dat$Bodyweight))>1)/n\n\n\n#\n\ninstall.packages(\"gapminder\")\nlibrary(gapminder)\ndata(\"gapminder\")\nhead(gapminder)\n\nx=gapminder[gapminder$year==1952,]\nhead(x)\nsummary(x)\nhist(x$lifeExp)\n\n# We can compute F in two ways: the simplest way is to type mean(x <= a). \n# This calculates the number of values in x which are less than or equal a, \n# divided by the total number of values in x, in other words the proportion of values \n# less than or equal to a.\n\nmean(x$lifeExp <= 40)\n\nmean(x$lifeExp <= 60) - mean(x$lifeExp <= 40)\n\nprop = function(q) {\n  mean(x$lifeExp <= q)\n}\nclass(prop)\nprop(40)\n\nqs = seq(from=min(x$lifeExp), to=max(x$lifeExp), length=20)\nprops=sapply(qs,prop)\n\nplot(qs,props)\n\n# Or\n\nprops = sapply(qs, function(q) mean(x$lifeExp <= q))\n\n#Last was an inline function or anonymous\n\n# Compare with the built in function\nplot(ecdf(x$lifeExp))\n\n#\ndat=read.csv(\"femaleControlsPopulation.csv\")\nsummary(dat)\n\nset.seed(1)\n\navgs5=vector(\"numeric\", 1000)\nn=1000\nfor (i in 1:n){\n  avgs5[i]=mean(sample(dat$Bodyweight,5))\n}\navgs50=vector(\"numeric\",1000)\nfor (i in 1:n){\n  avgs50[i]=mean(sample(dat$Bodyweight,50))\n}\n\nhist(avgs5)\nhist(avgs50)\n\nmean(avgs50<=25)-mean(avgs50<=23)\n\nz23=(23-23.9)/0.43\nz25=(25-23.9)/0.43\n\nz25-z23\n\npnorm(25,23.9,0.43)-pnorm(23,23.9,0.43)\n# same as above:\npnorm(z25)-pnorm(z23)\n# basically the Z is normalized to Normal(0,1)\n\n#\n\ndat=read.csv(\"mice_pheno.csv\")\ndat=na.omit(dat)\nstr(dat)\n# MALES\nmalechow=dat[dat$Sex==\"M\" & dat$Diet==\"chow\",]\nxmean=mean(dat[dat$Sex==\"M\" & dat$Diet==\"chow\",]$Bodyweight)\nxsd=sd(dat[dat$Sex==\"M\" & dat$Diet==\"chow\",]$Bodyweight)\n\nset.seed(1)\nX=sample(malechow$Bodyweight, 25)\nXmean=mean(X)\n\n# Now males HF\nmalehf=dat[dat$Sex==\"M\" & dat$Diet==\"hf\",]\nymean=mean(malehf$Bodyweight)\n\ninstall.packages(\"rafalib\")\nlibrary(rafalib)\nysd=popsd(malehf$Bodyweight)\n\nset.seed(1)\nY=sample(malehf$Bodyweight, 25)\nYmean=mean(Y)\n\n(ymean-xmean)-(Ymean-Xmean)\n\n# FEMALES\nfemalechow=dat[dat$Sex==\"F\" & dat$Diet==\"chow\",]\nxmean=mean(femalechow$Bodyweight)\nxsd=sd(femalechow$Bodyweight)\n\nset.seed(1)\nX=sample(femalechow$Bodyweight, 25)\nXmean=mean(X)\n\n# Now females HF\nfemalehf=dat[dat$Sex==\"F\" & dat$Diet==\"hf\",]\nymean=mean(femalehf$Bodyweight)\n\nysd=popsd(femalehf$Bodyweight)\n\nset.seed(1)\nY=sample(femalehf$Bodyweight, 25)\nYmean=mean(Y)\n\nabs((ymean-xmean)-(Ymean-Xmean))\n\n(ymean-xmean)\n(Ymean-Xmean)\n#\n\n# CTL exercises\ndat <- na.omit( read.csv(\"mice_pheno.csv\"))\nstr(dat)\n\nstr(malechow)\ny=malechow$Bodyweight\nstr(y)\nymean=mean(y)\nysd=popsd(y)\nc(ymean, ysd)\n\nmean(y>ymean-ysd & y<=ymean+ysd)\n\nmean(y>ymean-2*ysd & y<=ymean+2*ysd)\n\nmean(y>ymean-3*ysd & y<=ymean+3*ysd)\n\n\n#\navgs <- replicate(10000, mean( sample(y, 25)))\nmypar(1,2)\nhist(avgs)\nqqnorm(avgs)\nqqline(avgs)\n\nmean(avgs)\npopsd(avgs)\n\n#",
    "created" : 1462107652637.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "892327195",
    "id" : "2BCBDACF",
    "lastKnownWriteTime" : 1462221305,
    "last_content_update" : 1462221305,
    "path" : "~/Desktop/edX/Data_Analysis_for_Life_Sciences_1/Project1/code.R",
    "project_path" : "code.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}